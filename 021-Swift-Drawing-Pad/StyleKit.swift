//
//  StyleKit.swift
//  ProjectName
//
//  Created by Audrey Li on 5/6/15.
//  Copyright (c) 2015 shomigo.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfShades: UIImage?
        static var shadesTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawShades() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.184, green: 0.753, blue: 0.890, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.5)
        let color3 = color2.colorWithAlphaComponent(0.3)

        //// Shadow Declarations
        let shadow = UIColor.blackColor().colorWithAlphaComponent(0.19)
        let shadowOffset = CGSizeMake(3.1, 3.1)
        let shadowBlurRadius: CGFloat = 5

        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 26, 95)
        CGContextScaleCTM(context, 1.5, 0.7)

        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 65, 42.86))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, (shadow as UIColor).CGColor)
        color.setFill()
        oval3Path.fill()
        CGContextRestoreGState(context)


        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 26, 60)
        CGContextScaleCTM(context, 1.5, 0.7)

        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 65, 40))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, (shadow as UIColor).CGColor)
        color2.setFill()
        oval2Path.fill()
        CGContextRestoreGState(context)


        CGContextRestoreGState(context)


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 26, 22)
        CGContextScaleCTM(context, 1.5, 0.7)

        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 65, 48.57))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, (shadow as UIColor).CGColor)
        color3.setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)


        CGContextRestoreGState(context)
    }

    public class func drawStrokeAlpha(#frame: CGRect) {
        //// Color Declarations
        let color = UIColor(red: 0.184, green: 0.753, blue: 0.890, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.5)
        let color3 = color2.colorWithAlphaComponent(0.3)


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.06040 + 0.5), frame.minY + floor(frame.height * 0.24000 + 0.5), floor(frame.width * 0.83221 + 0.5) - floor(frame.width * 0.06040 + 0.5), floor(frame.height * 0.80667 + 0.5) - floor(frame.height * 0.24000 + 0.5))


        //// Group
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 0.70435 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        color2.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.30435 + 0.5), group.minY + floor(group.height * 0.01176 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.30435 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.01176 + 0.5)))
        color3.setFill()
        oval2Path.fill()
    }

    public class func drawLineWidth(#frame: CGRect) {
        //// Color Declarations
        let color = UIColor(red: 0.184, green: 0.753, blue: 0.890, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.5)


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.15333 + 0.5), frame.minY + floor(frame.height * 0.17881 + 0.5), floor(frame.width * 0.82667 + 0.5) - floor(frame.width * 0.15333 + 0.5), floor(frame.height * 0.84106 + 0.5) - floor(frame.height * 0.17881 + 0.5))


        //// Group
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        color2.setStroke()
        ovalPath.lineWidth = 3.5
        ovalPath.stroke()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.11881 + 0.5), group.minY + floor(group.height * 0.12000 + 0.5), floor(group.width * 0.87129 + 0.5) - floor(group.width * 0.11881 + 0.5), floor(group.height * 0.88000 + 0.5) - floor(group.height * 0.12000 + 0.5)))
        color2.setStroke()
        oval2Path.lineWidth = 3.5
        oval2Path.stroke()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.23762 + 0.5), group.minY + floor(group.height * 0.24000) + 0.5, floor(group.width * 0.76733) - floor(group.width * 0.23762 + 0.5) + 0.5, floor(group.height * 0.76500 + 0.5) - floor(group.height * 0.24000) - 0.5))
        color2.setStroke()
        oval3Path.lineWidth = 3.5
        oval3Path.stroke()


        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.36634 + 0.5), group.minY + floor(group.height * 0.37000) + 0.5, floor(group.width * 0.62871) - floor(group.width * 0.36634 + 0.5) + 0.5, floor(group.height * 0.62500 + 0.5) - floor(group.height * 0.37000) - 0.5))
        color2.setStroke()
        oval4Path.lineWidth = 3.5
        oval4Path.stroke()
    }

    public class func drawAddColor(#frame: CGRect) {
        //// Color Declarations
        let color = UIColor(red: 0.184, green: 0.753, blue: 0.890, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.5)


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.16556 + 0.5), frame.minY + floor(frame.height * 0.17219 + 0.5), floor(frame.width * 0.81457 + 0.5) - floor(frame.width * 0.16556 + 0.5), floor(frame.height * 0.82119 + 0.5) - floor(frame.height * 0.17219 + 0.5))


        //// Group
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.09232 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.46157 * group.height), controlPoint1: CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.09231 * group.height), controlPoint2: CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.27181 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.91538 * group.width, group.minY + 0.46157 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.91538 * group.width, group.minY + 0.53080 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.53080 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.90005 * group.height), controlPoint1: CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.72056 * group.height), controlPoint2: CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.90005 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.90005 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.53080 * group.height), controlPoint1: CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.90005 * group.height), controlPoint2: CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.72056 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.10764 * group.width, group.minY + 0.53080 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.10764 * group.width, group.minY + 0.46157 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.46157 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.09231 * group.height), controlPoint1: CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.27181 * group.height), controlPoint2: CGPointMake(group.minX + 0.47689 * group.width, group.minY + 0.09231 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.09231 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.54613 * group.width, group.minY + 0.09232 * group.height))
        bezierPath.closePath()
        UIColor.whiteColor().setFill()
        bezierPath.fill()
    }

    public class func drawEraser(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.184, green: 0.753, blue: 0.890, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.5)
        let color8 = UIColor(red: 0.509, green: 0.509, blue: 0.509, alpha: 1.000)
        let color12 = UIColor(red: 0.045, green: 0.368, blue: 0.563, alpha: 1.000)
        let color13 = UIColor(red: 0.547, green: 0.547, blue: 0.547, alpha: 1.000)
        let color7 = UIColor(red: 0.530, green: 0.530, blue: 0.530, alpha: 1.000)
        let color11 = UIColor(red: 0.447, green: 0.447, blue: 0.447, alpha: 1.000)
        let color4 = UIColor(red: 0.427, green: 0.427, blue: 0.427, alpha: 1.000)
        let color6 = UIColor(red: 0.551, green: 0.551, blue: 0.551, alpha: 1.000)
        let color14 = UIColor(red: 0.054, green: 0.438, blue: 0.682, alpha: 1.000)
        let color9 = UIColor(red: 0.488, green: 0.488, blue: 0.488, alpha: 1.000)
        let color10 = UIColor(red: 0.467, green: 0.467, blue: 0.467, alpha: 1.000)
        let color5 = UIColor(red: 0.594, green: 0.594, blue: 0.594, alpha: 1.000)
        let color15 = UIColor(red: 0.572, green: 0.572, blue: 0.572, alpha: 1.000)
        let color1 = UIColor(red: 0.683, green: 0.683, blue: 0.683, alpha: 1.000)
        let color16 = UIColor(red: 0.052, green: 0.422, blue: 0.655, alpha: 1.000)
        let color17 = UIColor(red: 0.616, green: 0.616, blue: 0.616, alpha: 1.000)
        let color18 = UIColor(red: 0.719, green: 0.719, blue: 0.719, alpha: 1.000)
        let color21 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.23036 - 0.05) + 0.55, frame.minY + floor(frame.height * 0.04429 + 0.11) + 0.39, floor(frame.width * 0.93394 + 0.41) - floor(frame.width * 0.23036 - 0.05) - 0.46, floor(frame.height * 0.77588 + 0.1) - floor(frame.height * 0.04429 + 0.11) + 0.01)


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 14, frame.minY + 11, frame.width - 27, frame.height - 26))
        color2.setFill()
        ovalPath.fill()


        //// Group
        //// Group 12
        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.35911 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.01689 * group.width, group.minY + 0.81114 * group.height), controlPoint1: CGPointMake(group.minX + 0.27952 * group.width, group.minY + 0.96232 * group.height), controlPoint2: CGPointMake(group.minX + 0.10611 * group.width, group.minY + 0.86550 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.01288 * group.width, group.minY + 0.72789 * group.height), controlPoint1: CGPointMake(group.minX + -0.01861 * group.width, group.minY + 0.78951 * group.height), controlPoint2: CGPointMake(group.minX + 0.01288 * group.width, group.minY + 0.72789 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.49755 * group.width, group.minY + 0.00367 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.43164 * group.width, group.minY + 0.96274 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.39209 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.miterLimit = 4;

        color21.setFill()
        bezier2Path.fill()


        //// Group 2
        //// Group 3
        //// Group 4
        //// Group 5
        //// Bezier 4 Drawing
        var bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(group.minX + 0.21787 * group.width, group.minY + 0.55012 * group.height))
        bezier4Path.addLineToPoint(CGPointMake(group.minX + 0.14655 * group.width, group.minY + 0.50785 * group.height))
        bezier4Path.addLineToPoint(CGPointMake(group.minX + 0.26461 * group.width, group.minY + 0.29796 * group.height))
        bezier4Path.addLineToPoint(CGPointMake(group.minX + 0.33593 * group.width, group.minY + 0.34023 * group.height))
        bezier4Path.addLineToPoint(CGPointMake(group.minX + 0.21787 * group.width, group.minY + 0.55012 * group.height))
        bezier4Path.closePath()
        bezier4Path.miterLimit = 4;

        color1.setFill()
        bezier4Path.fill()




        //// Group 6
        //// Bezier 6 Drawing
        var bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPointMake(group.minX + 0.27019 * group.width, group.minY + 0.94977 * group.height))
        bezier6Path.addLineToPoint(CGPointMake(group.minX + 0.34434 * group.width, group.minY + 0.99437 * group.height))
        bezier6Path.addLineToPoint(CGPointMake(group.minX + 0.10402 * group.width, group.minY + 0.84983 * group.height))
        bezier6Path.addLineToPoint(CGPointMake(group.minX + 0.02988 * group.width, group.minY + 0.80523 * group.height))
        bezier6Path.addLineToPoint(CGPointMake(group.minX + 0.27019 * group.width, group.minY + 0.94977 * group.height))
        bezier6Path.closePath()
        bezier6Path.miterLimit = 4;

        color4.setFill()
        bezier6Path.fill()




        //// Group 7
        //// Bezier 8 Drawing
        var bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPointMake(group.minX + 0.49154 * group.width, group.minY + 0.86189 * group.height))
        bezier8Path.addLineToPoint(CGPointMake(group.minX + 0.41519 * group.width, group.minY + 0.81873 * group.height))
        bezier8Path.addLineToPoint(CGPointMake(group.minX + 0.48368 * group.width, group.minY + 0.70259 * group.height))
        bezier8Path.addLineToPoint(CGPointMake(group.minX + 0.56003 * group.width, group.minY + 0.74575 * group.height))
        bezier8Path.addLineToPoint(CGPointMake(group.minX + 0.49154 * group.width, group.minY + 0.86189 * group.height))
        bezier8Path.closePath()
        bezier8Path.miterLimit = 4;

        color1.setFill()
        bezier8Path.fill()




        //// Group 8
        //// Bezier 10 Drawing
        var bezier10Path = UIBezierPath()
        bezier10Path.moveToPoint(CGPointMake(group.minX + 0.44614 * group.width, group.minY + 0.92237 * group.height))
        bezier10Path.addLineToPoint(CGPointMake(group.minX + 0.37285 * group.width, group.minY + 0.87878 * group.height))
        bezier10Path.addLineToPoint(CGPointMake(group.minX + 0.40802 * group.width, group.minY + 0.81605 * group.height))
        bezier10Path.addLineToPoint(CGPointMake(group.minX + 0.48130 * group.width, group.minY + 0.85963 * group.height))
        bezier10Path.addLineToPoint(CGPointMake(group.minX + 0.44614 * group.width, group.minY + 0.92237 * group.height))
        bezier10Path.closePath()
        bezier10Path.miterLimit = 4;

        color1.setFill()
        bezier10Path.fill()




        //// Group 9
        //// Bezier 12 Drawing
        var bezier12Path = UIBezierPath()
        bezier12Path.moveToPoint(CGPointMake(group.minX + 0.43147 * group.width, group.minY + 0.95747 * group.height))
        bezier12Path.addLineToPoint(CGPointMake(group.minX + 0.36097 * group.width, group.minY + 0.91577 * group.height))
        bezier12Path.addLineToPoint(CGPointMake(group.minX + 0.37793 * group.width, group.minY + 0.88568 * group.height))
        bezier12Path.addLineToPoint(CGPointMake(group.minX + 0.44843 * group.width, group.minY + 0.92737 * group.height))
        bezier12Path.addLineToPoint(CGPointMake(group.minX + 0.43147 * group.width, group.minY + 0.95747 * group.height))
        bezier12Path.closePath()
        bezier12Path.miterLimit = 4;

        color1.setFill()
        bezier12Path.fill()




        //// Group 10
        //// Group 11
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Bezier 13
        var bezier13Path = UIBezierPath()
        bezier13Path.moveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height))
        bezier13Path.addLineToPoint(CGPointMake(group.minX + 0.42706 * group.width, group.minY + 0.95461 * group.height))
        bezier13Path.addCurveToPoint(CGPointMake(group.minX + 0.35020 * group.width, group.minY + 0.99495 * group.height), controlPoint1: CGPointMake(group.minX + 0.40718 * group.width, group.minY + 0.99032 * group.height), controlPoint2: CGPointMake(group.minX + 0.37269 * group.width, group.minY + 1.00842 * group.height))
        bezier13Path.addLineToPoint(CGPointMake(group.minX + 0.27820 * group.width, group.minY + 0.95183 * group.height))
        bezier13Path.addCurveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height), controlPoint1: CGPointMake(group.minX + 0.30068 * group.width, group.minY + 0.96530 * group.height), controlPoint2: CGPointMake(group.minX + 0.33517 * group.width, group.minY + 0.94721 * group.height))
        bezier13Path.closePath()
        bezier13Path.addClip()


        //// SVGID_2_
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Bezier 14
        var bezier14Path = UIBezierPath()
        bezier14Path.moveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height))
        bezier14Path.addLineToPoint(CGPointMake(group.minX + 0.42706 * group.width, group.minY + 0.95461 * group.height))
        bezier14Path.addCurveToPoint(CGPointMake(group.minX + 0.35020 * group.width, group.minY + 0.99495 * group.height), controlPoint1: CGPointMake(group.minX + 0.40718 * group.width, group.minY + 0.99032 * group.height), controlPoint2: CGPointMake(group.minX + 0.37269 * group.width, group.minY + 1.00842 * group.height))
        bezier14Path.addLineToPoint(CGPointMake(group.minX + 0.27820 * group.width, group.minY + 0.95183 * group.height))
        bezier14Path.addCurveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height), controlPoint1: CGPointMake(group.minX + 0.30068 * group.width, group.minY + 0.96530 * group.height), controlPoint2: CGPointMake(group.minX + 0.33517 * group.width, group.minY + 0.94721 * group.height))
        bezier14Path.closePath()
        bezier14Path.addClip()


        //// Bezier 16 Drawing
        var bezier16Path = UIBezierPath()
        bezier16Path.moveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height))
        bezier16Path.addLineToPoint(CGPointMake(group.minX + 0.42706 * group.width, group.minY + 0.95461 * group.height))
        bezier16Path.addCurveToPoint(CGPointMake(group.minX + 0.42570 * group.width, group.minY + 0.95700 * group.height), controlPoint1: CGPointMake(group.minX + 0.42662 * group.width, group.minY + 0.95541 * group.height), controlPoint2: CGPointMake(group.minX + 0.42616 * group.width, group.minY + 0.95621 * group.height))
        bezier16Path.addLineToPoint(CGPointMake(group.minX + 0.35369 * group.width, group.minY + 0.91388 * group.height))
        bezier16Path.addCurveToPoint(CGPointMake(group.minX + 0.35505 * group.width, group.minY + 0.91149 * group.height), controlPoint1: CGPointMake(group.minX + 0.35415 * group.width, group.minY + 0.91310 * group.height), controlPoint2: CGPointMake(group.minX + 0.35461 * group.width, group.minY + 0.91230 * group.height))
        bezier16Path.closePath()
        bezier16Path.miterLimit = 4;

        color17.setFill()
        bezier16Path.fill()


        //// Bezier 18 Drawing
        var bezier18Path = UIBezierPath()
        bezier18Path.moveToPoint(CGPointMake(group.minX + 0.35369 * group.width, group.minY + 0.91388 * group.height))
        bezier18Path.addLineToPoint(CGPointMake(group.minX + 0.42570 * group.width, group.minY + 0.95700 * group.height))
        bezier18Path.addCurveToPoint(CGPointMake(group.minX + 0.42204 * group.width, group.minY + 0.96282 * group.height), controlPoint1: CGPointMake(group.minX + 0.42452 * group.width, group.minY + 0.95900 * group.height), controlPoint2: CGPointMake(group.minX + 0.42330 * group.width, group.minY + 0.96094 * group.height))
        bezier18Path.addLineToPoint(CGPointMake(group.minX + 0.35003 * group.width, group.minY + 0.91970 * group.height))
        bezier18Path.addCurveToPoint(CGPointMake(group.minX + 0.35369 * group.width, group.minY + 0.91388 * group.height), controlPoint1: CGPointMake(group.minX + 0.35129 * group.width, group.minY + 0.91782 * group.height), controlPoint2: CGPointMake(group.minX + 0.35251 * group.width, group.minY + 0.91588 * group.height))
        bezier18Path.closePath()
        bezier18Path.miterLimit = 4;

        color5.setFill()
        bezier18Path.fill()


        //// Bezier 20 Drawing
        var bezier20Path = UIBezierPath()
        bezier20Path.moveToPoint(CGPointMake(group.minX + 0.35003 * group.width, group.minY + 0.91970 * group.height))
        bezier20Path.addLineToPoint(CGPointMake(group.minX + 0.42204 * group.width, group.minY + 0.96282 * group.height))
        bezier20Path.addCurveToPoint(CGPointMake(group.minX + 0.41813 * group.width, group.minY + 0.96827 * group.height), controlPoint1: CGPointMake(group.minX + 0.42077 * group.width, group.minY + 0.96470 * group.height), controlPoint2: CGPointMake(group.minX + 0.41947 * group.width, group.minY + 0.96652 * group.height))
        bezier20Path.addLineToPoint(CGPointMake(group.minX + 0.34612 * group.width, group.minY + 0.92515 * group.height))
        bezier20Path.addCurveToPoint(CGPointMake(group.minX + 0.35003 * group.width, group.minY + 0.91970 * group.height), controlPoint1: CGPointMake(group.minX + 0.34746 * group.width, group.minY + 0.92340 * group.height), controlPoint2: CGPointMake(group.minX + 0.34877 * group.width, group.minY + 0.92158 * group.height))
        bezier20Path.closePath()
        bezier20Path.miterLimit = 4;

        color15.setFill()
        bezier20Path.fill()


        //// Bezier 22 Drawing
        var bezier22Path = UIBezierPath()
        bezier22Path.moveToPoint(CGPointMake(group.minX + 0.34612 * group.width, group.minY + 0.92515 * group.height))
        bezier22Path.addLineToPoint(CGPointMake(group.minX + 0.41813 * group.width, group.minY + 0.96827 * group.height))
        bezier22Path.addCurveToPoint(CGPointMake(group.minX + 0.41395 * group.width, group.minY + 0.97340 * group.height), controlPoint1: CGPointMake(group.minX + 0.41678 * group.width, group.minY + 0.97005 * group.height), controlPoint2: CGPointMake(group.minX + 0.41538 * group.width, group.minY + 0.97176 * group.height))
        bezier22Path.addLineToPoint(CGPointMake(group.minX + 0.34194 * group.width, group.minY + 0.93029 * group.height))
        bezier22Path.addCurveToPoint(CGPointMake(group.minX + 0.34612 * group.width, group.minY + 0.92515 * group.height), controlPoint1: CGPointMake(group.minX + 0.34337 * group.width, group.minY + 0.92864 * group.height), controlPoint2: CGPointMake(group.minX + 0.34477 * group.width, group.minY + 0.92693 * group.height))
        bezier22Path.closePath()
        bezier22Path.miterLimit = 4;

        color6.setFill()
        bezier22Path.fill()


        //// Bezier 24 Drawing
        var bezier24Path = UIBezierPath()
        bezier24Path.moveToPoint(CGPointMake(group.minX + 0.34194 * group.width, group.minY + 0.93029 * group.height))
        bezier24Path.addLineToPoint(CGPointMake(group.minX + 0.41395 * group.width, group.minY + 0.97340 * group.height))
        bezier24Path.addCurveToPoint(CGPointMake(group.minX + 0.40942 * group.width, group.minY + 0.97829 * group.height), controlPoint1: CGPointMake(group.minX + 0.41247 * group.width, group.minY + 0.97511 * group.height), controlPoint2: CGPointMake(group.minX + 0.41096 * group.width, group.minY + 0.97673 * group.height))
        bezier24Path.addLineToPoint(CGPointMake(group.minX + 0.33742 * group.width, group.minY + 0.93517 * group.height))
        bezier24Path.addCurveToPoint(CGPointMake(group.minX + 0.34194 * group.width, group.minY + 0.93029 * group.height), controlPoint1: CGPointMake(group.minX + 0.33895 * group.width, group.minY + 0.93362 * group.height), controlPoint2: CGPointMake(group.minX + 0.34047 * group.width, group.minY + 0.93199 * group.height))
        bezier24Path.closePath()
        bezier24Path.miterLimit = 4;

        color7.setFill()
        bezier24Path.fill()


        //// Bezier 26 Drawing
        var bezier26Path = UIBezierPath()
        bezier26Path.moveToPoint(CGPointMake(group.minX + 0.33742 * group.width, group.minY + 0.93517 * group.height))
        bezier26Path.addLineToPoint(CGPointMake(group.minX + 0.40942 * group.width, group.minY + 0.97829 * group.height))
        bezier26Path.addCurveToPoint(CGPointMake(group.minX + 0.40443 * group.width, group.minY + 0.98297 * group.height), controlPoint1: CGPointMake(group.minX + 0.40779 * group.width, group.minY + 0.97994 * group.height), controlPoint2: CGPointMake(group.minX + 0.40612 * group.width, group.minY + 0.98150 * group.height))
        bezier26Path.addLineToPoint(CGPointMake(group.minX + 0.33242 * group.width, group.minY + 0.93985 * group.height))
        bezier26Path.addCurveToPoint(CGPointMake(group.minX + 0.33742 * group.width, group.minY + 0.93517 * group.height), controlPoint1: CGPointMake(group.minX + 0.33411 * group.width, group.minY + 0.93838 * group.height), controlPoint2: CGPointMake(group.minX + 0.33578 * group.width, group.minY + 0.93682 * group.height))
        bezier26Path.closePath()
        bezier26Path.miterLimit = 4;

        color8.setFill()
        bezier26Path.fill()


        //// Bezier 28 Drawing
        var bezier28Path = UIBezierPath()
        bezier28Path.moveToPoint(CGPointMake(group.minX + 0.33242 * group.width, group.minY + 0.93985 * group.height))
        bezier28Path.addLineToPoint(CGPointMake(group.minX + 0.40443 * group.width, group.minY + 0.98297 * group.height))
        bezier28Path.addCurveToPoint(CGPointMake(group.minX + 0.39878 * group.width, group.minY + 0.98748 * group.height), controlPoint1: CGPointMake(group.minX + 0.40257 * group.width, group.minY + 0.98459 * group.height), controlPoint2: CGPointMake(group.minX + 0.40069 * group.width, group.minY + 0.98609 * group.height))
        bezier28Path.addLineToPoint(CGPointMake(group.minX + 0.32677 * group.width, group.minY + 0.94436 * group.height))
        bezier28Path.addCurveToPoint(CGPointMake(group.minX + 0.33242 * group.width, group.minY + 0.93985 * group.height), controlPoint1: CGPointMake(group.minX + 0.32868 * group.width, group.minY + 0.94297 * group.height), controlPoint2: CGPointMake(group.minX + 0.33056 * group.width, group.minY + 0.94147 * group.height))
        bezier28Path.closePath()
        bezier28Path.miterLimit = 4;

        color9.setFill()
        bezier28Path.fill()


        //// Bezier 30 Drawing
        var bezier30Path = UIBezierPath()
        bezier30Path.moveToPoint(CGPointMake(group.minX + 0.32677 * group.width, group.minY + 0.94436 * group.height))
        bezier30Path.addLineToPoint(CGPointMake(group.minX + 0.39878 * group.width, group.minY + 0.98748 * group.height))
        bezier30Path.addCurveToPoint(CGPointMake(group.minX + 0.39183 * group.width, group.minY + 0.99201 * group.height), controlPoint1: CGPointMake(group.minX + 0.39649 * group.width, group.minY + 0.98916 * group.height), controlPoint2: CGPointMake(group.minX + 0.39417 * group.width, group.minY + 0.99067 * group.height))
        bezier30Path.addLineToPoint(CGPointMake(group.minX + 0.31982 * group.width, group.minY + 0.94889 * group.height))
        bezier30Path.addCurveToPoint(CGPointMake(group.minX + 0.32677 * group.width, group.minY + 0.94436 * group.height), controlPoint1: CGPointMake(group.minX + 0.32216 * group.width, group.minY + 0.94755 * group.height), controlPoint2: CGPointMake(group.minX + 0.32448 * group.width, group.minY + 0.94604 * group.height))
        bezier30Path.closePath()
        bezier30Path.miterLimit = 4;

        color10.setFill()
        bezier30Path.fill()


        //// Bezier 32 Drawing
        var bezier32Path = UIBezierPath()
        bezier32Path.moveToPoint(CGPointMake(group.minX + 0.31982 * group.width, group.minY + 0.94889 * group.height))
        bezier32Path.addLineToPoint(CGPointMake(group.minX + 0.39183 * group.width, group.minY + 0.99201 * group.height))
        bezier32Path.addCurveToPoint(CGPointMake(group.minX + 0.35020 * group.width, group.minY + 0.99495 * group.height), controlPoint1: CGPointMake(group.minX + 0.37722 * group.width, group.minY + 1.00038 * group.height), controlPoint2: CGPointMake(group.minX + 0.36205 * group.width, group.minY + 1.00204 * group.height))
        bezier32Path.addLineToPoint(CGPointMake(group.minX + 0.27820 * group.width, group.minY + 0.95183 * group.height))
        bezier32Path.addCurveToPoint(CGPointMake(group.minX + 0.31982 * group.width, group.minY + 0.94889 * group.height), controlPoint1: CGPointMake(group.minX + 0.29004 * group.width, group.minY + 0.95892 * group.height), controlPoint2: CGPointMake(group.minX + 0.30521 * group.width, group.minY + 0.95726 * group.height))
        bezier32Path.closePath()
        bezier32Path.miterLimit = 4;

        color11.setFill()
        bezier32Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)




        //// Group 13
        //// Bezier 34 Drawing
        var bezier34Path = UIBezierPath()
        bezier34Path.moveToPoint(CGPointMake(group.minX + 0.27923 * group.width, group.minY + 0.29788 * group.height))
        bezier34Path.addLineToPoint(CGPointMake(group.minX + 0.60800 * group.width, group.minY + 0.48915 * group.height))
        bezier34Path.addLineToPoint(CGPointMake(group.minX + 0.68316 * group.width, group.minY + 0.53287 * group.height))
        bezier34Path.addLineToPoint(CGPointMake(group.minX + 0.35439 * group.width, group.minY + 0.34161 * group.height))
        bezier34Path.addLineToPoint(CGPointMake(group.minX + 0.27923 * group.width, group.minY + 0.29788 * group.height))
        bezier34Path.closePath()
        bezier34Path.miterLimit = 4;

        color12.setFill()
        bezier34Path.fill()




        //// Group 14
        //// Bezier 36 Drawing
        var bezier36Path = UIBezierPath()
        bezier36Path.moveToPoint(CGPointMake(group.minX + 0.14651 * group.width, group.minY + 0.51337 * group.height))
        bezier36Path.addLineToPoint(CGPointMake(group.minX + 0.22520 * group.width, group.minY + 0.55709 * group.height))
        bezier36Path.addLineToPoint(CGPointMake(group.minX + 0.56939 * group.width, group.minY + 0.74836 * group.height))
        bezier36Path.addLineToPoint(CGPointMake(group.minX + 0.49071 * group.width, group.minY + 0.70464 * group.height))
        bezier36Path.addLineToPoint(CGPointMake(group.minX + 0.14651 * group.width, group.minY + 0.51337 * group.height))
        bezier36Path.closePath()
        bezier36Path.miterLimit = 4;

        color13.setFill()
        bezier36Path.fill()




        //// Group 15
        //// Bezier 38 Drawing
        var bezier38Path = UIBezierPath()
        bezier38Path.moveToPoint(CGPointMake(group.minX + 0.14645 * group.width, group.minY + 0.51309 * group.height))
        bezier38Path.addLineToPoint(CGPointMake(group.minX + 0.27562 * group.width, group.minY + 0.29798 * group.height))
        bezier38Path.addLineToPoint(CGPointMake(group.minX + 0.61693 * group.width, group.minY + 0.48747 * group.height))
        bezier38Path.addLineToPoint(CGPointMake(group.minX + 0.48777 * group.width, group.minY + 0.70258 * group.height))
        bezier38Path.addLineToPoint(CGPointMake(group.minX + 0.14645 * group.width, group.minY + 0.51309 * group.height))
        bezier38Path.closePath()
        bezier38Path.miterLimit = 4;

        color14.setFill()
        bezier38Path.fill()




        //// Group 16
        //// Bezier 40 Drawing
        var bezier40Path = UIBezierPath()
        bezier40Path.moveToPoint(CGPointMake(group.minX + 0.56288 * group.width, group.minY + 0.74842 * group.height))
        bezier40Path.addLineToPoint(CGPointMake(group.minX + 0.48442 * group.width, group.minY + 0.70461 * group.height))
        bezier40Path.addLineToPoint(CGPointMake(group.minX + 0.61430 * group.width, group.minY + 0.48708 * group.height))
        bezier40Path.addLineToPoint(CGPointMake(group.minX + 0.69276 * group.width, group.minY + 0.53088 * group.height))
        bezier40Path.addLineToPoint(CGPointMake(group.minX + 0.56288 * group.width, group.minY + 0.74842 * group.height))
        bezier40Path.closePath()
        bezier40Path.miterLimit = 4;

        color16.setFill()
        bezier40Path.fill()




        //// Group 17
        //// Bezier 42 Drawing
        var bezier42Path = UIBezierPath()
        bezier42Path.moveToPoint(CGPointMake(group.minX + 0.27344 * group.width, group.minY + 0.29788 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.14507 * group.width, group.minY + 0.51165 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.48430 * group.width, group.minY + 0.69996 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.41474 * group.width, group.minY + 0.81580 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.37753 * group.width, group.minY + 0.87776 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.35887 * group.width, group.minY + 0.90883 * group.height))
        bezier42Path.addCurveToPoint(CGPointMake(group.minX + 0.27610 * group.width, group.minY + 0.94910 * group.height), controlPoint1: CGPointMake(group.minX + 0.33746 * group.width, group.minY + 0.94448 * group.height), controlPoint2: CGPointMake(group.minX + 0.30032 * group.width, group.minY + 0.96254 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.02476 * group.width, group.minY + 0.80958 * group.height))
        bezier42Path.addCurveToPoint(CGPointMake(group.minX + 0.01965 * group.width, group.minY + 0.72052 * group.height), controlPoint1: CGPointMake(group.minX + 0.00052 * group.width, group.minY + 0.79612 * group.height), controlPoint2: CGPointMake(group.minX + -0.00176 * group.width, group.minY + 0.75618 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.03830 * group.width, group.minY + 0.68945 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.07551 * group.width, group.minY + 0.62749 * group.height))
        bezier42Path.addLineToPoint(CGPointMake(group.minX + 0.27344 * group.width, group.minY + 0.29788 * group.height))
        bezier42Path.closePath()
        bezier42Path.miterLimit = 4;

        color18.setFill()
        bezier42Path.fill()
    }

    //// Generated Images

    public class var imageOfShades: UIImage {
        if Cache.imageOfShades != nil {
            return Cache.imageOfShades!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(150, 150), false, 0)
            StyleKit.drawShades()

        Cache.imageOfShades = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShades!
    }

    public class func imageOfStrokeAlpha(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawStrokeAlpha(frame: frame)

        let imageOfStrokeAlpha = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStrokeAlpha
    }

    public class func imageOfLineWidth(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawLineWidth(frame: frame)

        let imageOfLineWidth = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLineWidth
    }

    public class func imageOfAddColor(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawAddColor(frame: frame)

        let imageOfAddColor = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAddColor
    }

    public class func imageOfEraser(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawEraser(frame: frame)

        let imageOfEraser = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEraser
    }

    //// Customization Infrastructure

    @IBOutlet var shadesTargets: [AnyObject]! {
        get { return Cache.shadesTargets }
        set {
            Cache.shadesTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(StyleKit.imageOfShades)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
